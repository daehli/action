name: Docker
on: [push]
jobs:
  build_and_push:
    name: Build and push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      # Create an array of version to push to the Dockerhub registery
      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $(git describe ${{github.sha}} --tags)) ## Get the tags from the SHA hash
          VALID_TAG="^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"  ## Will match Tags in the following format v123.231.123 or v1.2.3 will discard the following format v1.2.4-<revision>
          DOCKER_IMAGE=botpress/server
          VERSION=()
          if [[ $TAG =~ $VALID_TAG ]]; then
            echo "VALID TAG"
            VERSION+=($(echo ${TAG} | sed -r 's/v//')) # transform v12.23.0 to 12.23.0
            VERSION+=("latest")
            VERSION+=($(echo ${TAG} | sed -r 's/\./_/g')) # Transform v12.13.0 to v12_13_0 ## Added backward compatibility
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION+=($(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')) # transform feature/00-feature-branch to feature-00-feature-branch
          fi
          if [[ $GITHUB_REG == "refs/heads/${{secrets.PRINCIPAL_BRANCH}} " ]]; then
            ## Check if code is pushed on the PRINCIPAL_BRANCH. PRINCIPAL_BRANCH is set as a SECRET
            VERSION+=(${{secrets.PRINCIPAL_BRANCH}})
          fi
          TAGS=("${VERSION[@]/#/${DOCKER_IMAGE}:}")
          echo ::set-output name=version::${VERSION[@]}
          IFS=,
          echo ::set-output name=tags::"${TAGS[*]}"
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Checkout code
        uses: actions/checkout@v2.1.0
        with:
          token: ${{ secrets.PAT_DOCKER }}
          submodules: true
      - name: DockerHub Authentication
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
